#!/usr/bin/env bash
set -euo pipefail

ROLE=""
KEEPER_ID=""
ENV_NAME="dev"
ENV_FILE=""
LOG_DIR=""
CLEANUP_ENV=""

usage(){
  cat <<USAGE
Usage: $0 --role <server1|server2|server3> [--keeper-id N] [--env-name NAME] [--env-file PATH] [--log-dir DIR]

Runs bootstrap_server.sh in plan mode and captures the transcript.
USAGE
  exit 2
}

while [[ $# -gt 0 ]]; do
  case "$1" in
    --role) ROLE="${2:-}"; shift 2 ;;
    --keeper-id) KEEPER_ID="${2:-}"; shift 2 ;;
    --env-name) ENV_NAME="${2:-}"; shift 2 ;;
    --env-file) ENV_FILE="${2:-}"; shift 2 ;;
    --log-dir) LOG_DIR="${2:-}"; shift 2 ;;
    -h|--help) usage ;;
    *) echo "Unknown arg: $1" >&2; usage ;;
  esac
done

[[ -z "$ROLE" ]] && usage

REPO_ROOT="$(cd "$(dirname "${BASH_SOURCE[0]}")/.." && pwd)"
[[ -z "$LOG_DIR" ]] && LOG_DIR="${REPO_ROOT}/plan-logs"
mkdir -p "$LOG_DIR"

if [[ -z "$ENV_FILE" ]]; then
  base_env="${REPO_ROOT}/envs/${ENV_NAME}.env"
  role_env="${REPO_ROOT}/envs/${ROLE}/${ENV_NAME}.env"

  if [[ ! -f "$base_env" && ! -f "$role_env" ]]; then
    echo "Unable to determine env file for role '$ROLE' (env name '$ENV_NAME')" >&2
    exit 1
  fi

  CLEANUP_ENV="$(mktemp)"
  {
    echo "# Generated by plan_server.sh on $(date -u +'%%Y-%%m-%%dT%%H:%%M:%%SZ')"
    echo "ROLE=${ROLE}"
    echo
    if [[ -f "$base_env" ]]; then
      cat "$base_env"
      echo
    fi
    if [[ -f "$role_env" ]]; then
      cat "$role_env"
      echo
    fi
  } >"$CLEANUP_ENV"
  ENV_FILE="$CLEANUP_ENV"
fi

if [[ ! -f "$ENV_FILE" ]]; then
  echo "Env file not found: $ENV_FILE" >&2
  exit 1
fi

cleanup(){
  if [[ -n "$CLEANUP_ENV" && -f "$CLEANUP_ENV" ]]; then
    rm -f "$CLEANUP_ENV"
  fi
}
trap cleanup EXIT

stamp="$(date +%Y%m%d_%H%M%S)"
log_file="${LOG_DIR}/plan_${ROLE}_${stamp}.log"

printf 'Writing plan transcript to %s\n' "$log_file"

cmd=("${REPO_ROOT}/bootstrap_server.sh" --role "$ROLE" --env-file "$ENV_FILE" --plan)
[[ -n "$KEEPER_ID" ]] && cmd+=(--keeper-id "$KEEPER_ID")

export PLAN_MODE=1
export PATH="${REPO_ROOT}/tools/shims:${PATH}"
export ENV_FILE

(
  set -o pipefail
  cd "$REPO_ROOT"
  "${cmd[@]}"
) | tee "$log_file"

status=${PIPESTATUS[0]}
if [[ $status -ne 0 ]]; then
  echo "Plan run failed (exit $status). See $log_file" >&2
  exit $status
fi

printf 'Plan run complete (exit %d).\n' "$status"
